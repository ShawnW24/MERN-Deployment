{"version":3,"sources":["views/Main.jsx","components/PetForm.jsx","views/New.jsx","views/Show.jsx","views/Edit.jsx","App.js","serviceWorker.js","index.js"],"names":["Main","props","useState","pets","setPets","useEffect","Axios","get","then","res","data","results","catch","err","console","log","className","map","p","i","key","name","type","to","_id","PetForm","inputs","errors","handleInputChange","handleSubmit","submitValue","onSubmit","htmlFor","value","onChange","message","description","skillOne","skillTwo","skillThree","New","initialPet","pet","setPet","setErrors","e","target","preventDefault","post","navigate","Show","id","onClick","delete","Edit","edit","setEdit","put","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"6QA4CeA,EAxCF,SAAAC,GAAU,IAAD,EACIC,mBAAS,IADb,mBACZC,EADY,KACPC,EADO,KASlB,OANAC,qBAAW,WACPC,IAAMC,IAAI,kCACLC,MAAK,SAAAC,GAAG,OAAIL,EAAQK,EAAIC,KAAKC,YAC7BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC/B,IAGC,6BACI,wBAAIG,UAAW,4CAAf,2CACA,2BAAOA,UAAU,kCACb,gCACI,4BACI,oCACA,oCACA,yCAGR,+BAGQb,EAAKc,KAAI,SAACC,EAAEC,GACR,OAAO,wBAAIC,IAAKD,GACJ,4BAAKD,EAAEG,MACP,4BAAKH,EAAEI,MACP,4BACI,kBAAC,IAAD,CAAMC,GAAE,eAAUL,EAAEM,KAAOR,UAAU,mBAArC,WACA,kBAAC,IAAD,CAAMO,GAAE,gBAAWL,EAAEM,KAAOR,UAAU,gBAAtC,mB,cCW7BS,EA1CC,SAAAxB,GAAU,IAChByB,EAA+DzB,EAA/DyB,OAAQC,EAAuD1B,EAAvD0B,OAAQC,EAA+C3B,EAA/C2B,kBAAmBC,EAA4B5B,EAA5B4B,aAAcC,EAAc7B,EAAd6B,YAEvD,OACI,0BAAMd,UAAW,wBAAwBe,SAAUF,GAC/C,yBAAKb,UAAU,cACX,2BAAOgB,QAAQ,QAAf,SACA,2BAAOhB,UAAU,eAAeM,KAAK,OAAOD,KAAK,OAAOY,MAAOP,EAAOL,KAAMa,SAAUN,IACtF,0BAAMZ,UAAU,eAAeW,EAAON,KAAOM,EAAON,KAAKc,QAAU,KAEvE,yBAAKnB,UAAU,cACX,2BAAOgB,QAAQ,QAAf,aACA,2BAAOhB,UAAU,eAAeM,KAAK,OAAOD,KAAK,OAAOY,MAAOP,EAAOJ,KAAMY,SAAUN,IACtF,0BAAMZ,UAAU,eAAeW,EAAOL,KAAOK,EAAOL,KAAKa,QAAU,KAEvE,yBAAKnB,UAAU,cACX,2BAAOgB,QAAQ,eAAf,gBACA,2BAAOhB,UAAU,eAAeM,KAAK,OAAOD,KAAK,cAAcY,MAAOP,EAAOU,YAAaF,SAAUN,IACpG,0BAAMZ,UAAU,eAAeW,EAAOS,YAAcT,EAAOS,YAAYD,QAAU,KAErF,kDACA,yBAAKnB,UAAU,cACX,2BAAOgB,QAAQ,YAAf,cACA,2BAAOhB,UAAU,eAAeM,KAAK,OAAOD,KAAK,WAAWY,MAAOP,EAAOW,SAAUH,SAAUN,IAC9F,0BAAMZ,UAAU,eAAeW,EAAOU,SAAWV,EAAOU,SAASF,QAAU,KAE/E,yBAAKnB,UAAU,cACX,2BAAOgB,QAAQ,YAAf,cACA,2BAAOhB,UAAU,eAAeM,KAAK,OAAOD,KAAK,WAAWY,MAAOP,EAAOY,SAAUJ,SAAUN,IAC9F,0BAAMZ,UAAU,eAAeW,EAAOW,SAAWX,EAAOW,SAASH,QAAU,KAE/E,yBAAKnB,UAAU,cACX,2BAAOgB,QAAQ,cAAf,gBACA,2BAAOhB,UAAU,eAAeM,KAAK,OAAOD,KAAK,aAAaY,MAAOP,EAAOa,WAAYL,SAAUN,IAClG,0BAAMZ,UAAU,eAAeW,EAAOY,WAAaZ,EAAOY,WAAWJ,QAAU,KAEnF,2BAAOb,KAAK,SAASW,MAAOH,EAAad,UAAU,sBCwBhDwB,EAxDH,SAAAvC,GACR,IAAMwC,EAAY,CACdpB,KAAK,GACLC,KAAK,GACLc,YAAY,GACZC,SAAS,GACTC,SAAS,GACTC,WAAW,IAPC,EAUMrC,mBAASuC,GAVf,mBAUTC,EAVS,KAUJC,EAVI,OAYWzC,mBAASuC,GAZpB,mBAYTd,EAZS,KAYDiB,EAZC,KAqChB,OACI,6BACI,0DACA,kBAAC,EAAD,CACIlB,OAAQgB,EACRf,OAAQA,EACRC,kBA7Bc,SAACiB,GACvBF,EAAO,2BACAD,GADD,kBAEDG,EAAEC,OAAOzB,KAAMwB,EAAEC,OAAOb,UA2BrBJ,aAxBS,SAACgB,GAClBD,EAAUH,GACVI,EAAEE,iBACFzC,IAAM0C,KAAK,uCAAwCN,GAC9ClC,MAAK,SAAAC,GACCA,EAAIC,KAAKC,QACRsC,YAAS,KAGTL,EAAUnC,EAAIC,SAGrBE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAatBiB,YAAY,gBCTboB,EAtCF,SAAAjD,GAAS,IAAD,EACIC,mBAAS,CAC1BmB,KAAK,GACLC,KAAK,GACLc,YAAY,GACZC,SAAS,GACTC,SAAS,GACTC,WAAW,KAPE,mBACVG,EADU,KACLC,EADK,KASjBtC,qBAAU,WACNC,IAAMC,IAAN,wCAA2CN,EAAMkD,KAC5C3C,MAAK,SAAAC,GAAG,OAAGkC,EAAOlC,EAAIC,KAAKC,YAC3BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC/B,CAACZ,IAQJ,OACI,yBAAKe,UAAU,uCACX,6CAAmB0B,EAAIrB,MACvB,uCAAaqB,EAAIpB,MACjB,0CAAgBoB,EAAIN,aACpB,uCACA,wBAAIpB,UAAU,wBACV,wBAAIA,UAAU,mBAAmB0B,EAAIL,UACrC,wBAAIrB,UAAU,mBAAmB0B,EAAIJ,UACrC,wBAAItB,UAAU,mBAAmB0B,EAAIH,aAEzC,4BAAQvB,UAAU,6CAA6CoC,QAjBpD,WACf9C,IAAM+C,OAAN,gDAAsDpD,EAAMkD,KACvD3C,MAAK,SAAAC,GAAG,OAAIwC,YAAS,QACrBrC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAc1B,SAA2F6B,EAAIrB,QCiC5FiC,EAhEF,SAAArD,GAET,IAKMwC,EAAY,CACdpB,KAAK,GACLC,KAAK,GACLc,YAAY,GACZC,SAAS,GACTC,SAAS,GACTC,WAAW,IAbG,EAeMrC,mBAASuC,GAff,mBAeXc,EAfW,KAeLC,EAfK,OAiBStD,mBAfP,CAChBmB,KAAK,GACLC,KAAK,GACLc,YAAY,KALE,mBAiBXT,EAjBW,KAiBHiB,EAjBG,KAmBlBvC,qBAAW,WACPC,IAAMC,IAAN,wCAA2CN,EAAMkD,KAC5C3C,MAAK,SAAAC,GAAG,OAAG+C,EAAQ/C,EAAIC,KAAKC,YAC5BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC/B,CAACZ,IAwBJ,OACI,6BACI,oCAAUsD,EAAKlC,KAAf,KACA,kBAAC,EAAD,CACIK,OAAQ6B,EACR5B,OAAQA,EACRC,kBA5Bc,SAACiB,GACvBW,EAAQ,2BACDD,GADA,kBAEFV,EAAEC,OAAOzB,KAAMwB,EAAEC,OAAOb,UA0BrBJ,aAvBS,SAACgB,GAClBD,EAAUH,GACVI,EAAEE,iBACFzC,IAAMmD,IAAN,+CAAkDF,EAAK/B,KAAO+B,GACzD/C,MAAK,SAAAC,GACCA,EAAIC,KAAKC,QACRsC,YAAS,QAAD,OAASM,EAAK/B,MAGtBoB,EAAUnC,EAAIC,SAGrBE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAYtBiB,YAAY,eCrBb4B,MA5Bf,WACE,OACE,yBAAK1C,UAAU,OACb,wBAAIA,UAAU,4CAAd,qBACA,yBAAKA,UAAU,wEACb,kBAAC,IAAD,CAAMO,GAAI,QAAV,4BACA,kBAAC,IAAD,CAAMA,GAAI,KAAV,SAIF,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAMoC,KAAK,MACX,kBAAC,EAAD,CAAKA,KAAK,SACV,kBAAC,EAAD,CAAMA,KAAK,aACX,kBAAC,EAAD,CAAMA,KAAK,iBCbCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEd9D,OAAM,SAAA+D,GACL7D,QAAQ6D,MAAMA,EAAMxC,c","file":"static/js/main.a7137c70.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport Axios from 'axios';\r\nimport {Link} from '@reach/router';\r\n\r\nconst Main = props => {\r\n    const[pets,setPets] = useState([]);\r\n\r\n    useEffect (() => {\r\n        Axios.get('http://localhost:8000/api/pets')\r\n            .then(res => setPets(res.data.results))\r\n            .catch(err => console.log(err));\r\n    }, [])\r\n\r\n    return(\r\n        <div>\r\n            <h2 className =\"bg-info  text-dark rounded col-6 mx-auto\">These Pets Are Looking For A Good Home!</h2>\r\n            <table className=\"table table-info col-7 mx-auto\">\r\n                <thread>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Type</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thread>\r\n                <tbody>\r\n\r\n                    {\r\n                        pets.map((p,i)=>{\r\n                            return <tr key={i}>\r\n                                        <td>{p.name}</td>\r\n                                        <td>{p.type}</td>\r\n                                        <td>\r\n                                            <Link to={`/pet/${p._id}`} className=\"btn btn-warning\">Details</Link>\r\n                                            <Link to={`/edit/${p._id}`} className=\"btn btn-info\"> Edit </Link>\r\n                                        </td>\r\n                                    </tr>\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst PetForm = props => {\r\n    const{inputs, errors, handleInputChange, handleSubmit, submitValue}= props;\r\n\r\n    return(\r\n        <form className= \"col-5 mx-auto bg-info\" onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"name\">Name:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"name\" value={inputs.name} onChange={handleInputChange} />\r\n                <span className=\"text-danger\">{errors.name ? errors.name.message : \"\"}</span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"type\">Pet Type:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"type\" value={inputs.type} onChange={handleInputChange} />\r\n                <span className=\"text-danger\">{errors.type ? errors.type.message : \"\"}</span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"description\">Description:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"description\" value={inputs.description} onChange={handleInputChange} />\r\n                <span className=\"text-danger\">{errors.description ? errors.description.message : \"\"}</span>\r\n            </div>\r\n            <h3>Skills: (Optional)</h3>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"skillOne\">Skill One:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"skillOne\" value={inputs.skillOne} onChange={handleInputChange} />\r\n                <span className=\"text-danger\">{errors.skillOne ? errors.skillOne.message : \"\"}</span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"skillTwo\">Skill Two:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"skillTwo\" value={inputs.skillTwo} onChange={handleInputChange} />\r\n                <span className=\"text-danger\">{errors.skillTwo ? errors.skillTwo.message : \"\"}</span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"skillThree\">Skill Three:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"skillThree\" value={inputs.skillThree} onChange={handleInputChange} />\r\n                <span className=\"text-danger\">{errors.skillThree ? errors.skillThree.message : \"\"}</span>\r\n            </div>\r\n            <input type=\"submit\" value={submitValue} className=\"btn btn-warning\"/>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default PetForm","import React, {useState} from 'react';\r\nimport Axios from 'axios';\r\nimport PetForm from '../components/PetForm';\r\nimport { navigate } from '@reach/router';\r\n\r\n\r\nconst New = props =>{\r\n    const initialPet ={\r\n        name:\"\",\r\n        type:\"\",\r\n        description:\"\",\r\n        skillOne:\"\",\r\n        skillTwo:\"\",\r\n        skillThree:\"\"\r\n    };\r\n\r\n    const [pet, setPet] = useState(initialPet);\r\n\r\n    const [errors, setErrors] =useState(initialPet);\r\n\r\n    const handleInputChange = (e) => {\r\n        setPet({\r\n            ...pet,\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n    const handleSubmit = (e) => {\r\n        setErrors(initialPet);\r\n        e.preventDefault();\r\n        Axios.post('http://localhost:8000/api/create/pet', pet)\r\n            .then(res => {\r\n                if(res.data.results){\r\n                    navigate('/')\r\n                }\r\n                else{\r\n                    setErrors(res.data);\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h2>Know A Pet Needing A Home?</h2>\r\n            <PetForm\r\n                inputs={pet}\r\n                errors={errors}\r\n                handleInputChange={handleInputChange}\r\n                handleSubmit={handleSubmit}\r\n                submitValue=\"Add A Pet\"\r\n            \r\n            />\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default New;","import React,{useState, useEffect} from 'react';\r\nimport Axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst Show = props =>{\r\n    const [pet, setPet] =useState({\r\n        name:'',\r\n        type:'',\r\n        description:'',\r\n        skillOne:'',\r\n        skillTwo:'',\r\n        skillThree:'',\r\n    });\r\n    useEffect(()=> {\r\n        Axios.get(`http://localhost:8000/api/pet/${props.id}`)\r\n            .then(res=> setPet(res.data.results))\r\n            .catch(err => console.log(err))\r\n    }, [props])\r\n\r\n    const destroyPet = () => {\r\n        Axios.delete(`http://localhost:8000/api/destroy/pet/${props.id}`)\r\n            .then(res => navigate('/'))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    return(\r\n        <div className=\"mx-auto p-5 col-6 bg-info text-dark\">\r\n            <h2>Details About {pet.name}</h2>\r\n            <p>Pet Type:{pet.type}</p>\r\n            <p>Description:{pet.description}</p>\r\n            <h3>Skills:</h3>\r\n            <ul className=\"list-group text-dark\">\r\n                <li className=\"list-group-item\">{pet.skillOne}</li>\r\n                <li className=\"list-group-item\">{pet.skillTwo}</li>\r\n                <li className=\"list-group-item\">{pet.skillThree}</li>\r\n            </ul>\r\n            <button className=\"btn btn-danger btn btn-outline-warning m-5\" onClick={destroyPet}>Adopt {pet.name}</button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Show;\r\n","import React, {useState, useEffect} from 'react';\r\nimport Axios from 'axios';\r\nimport {navigate} from '@reach/router';\r\nimport PetForm from '../components/PetForm';\r\n\r\nconst Edit = props => {\r\n\r\n    const initialErrors={\r\n        name:\"\",\r\n        type:\"\",\r\n        description:\"\"\r\n    }\r\n    const initialPet ={\r\n        name:\"\",\r\n        type:\"\",\r\n        description:\"\",\r\n        skillOne:\"\",\r\n        skillTwo:\"\",\r\n        skillThree:\"\"\r\n    }\r\n    const [edit, setEdit] = useState(initialPet);\r\n\r\n    const [errors, setErrors] =useState(initialErrors);\r\n\r\n    useEffect (() => {\r\n        Axios.get(`http://localhost:8000/api/pet/${props.id}`)\r\n            .then(res=> setEdit(res.data.results))\r\n            .catch(err => console.log(err))\r\n    }, [props])\r\n\r\n    const handleInputChange = (e) => {\r\n        setEdit({\r\n            ...edit,\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n    const handleSubmit = (e) => {\r\n        setErrors(initialPet);\r\n        e.preventDefault();\r\n        Axios.put(`http://localhost:8000/api/update/pet/${edit._id}`, edit)\r\n            .then(res => {\r\n                if(res.data.results){\r\n                    navigate(`/pet/${edit._id}`);\r\n                }\r\n                else{\r\n                    setErrors(res.data);\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h2>Edit {edit.name}:</h2>\r\n            <PetForm\r\n                inputs={edit}\r\n                errors={errors}\r\n                handleInputChange={handleInputChange}\r\n                handleSubmit={handleSubmit}\r\n                submitValue=\"Edit Pet\"\r\n        \r\n            />\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Edit;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Router, Link} from \"@reach/router\";\nimport Main from './views/Main';\nimport New from './views/New';\nimport Show from './views/Show';\nimport Edit from './views/Edit';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"bg-info  text-dark rounded col-3 mx-auto\">.::PET SHELTER::.</h1>\n      <div className=\"d-flex justify-content-around bg-dark col-6 mx-auto p-2 text-warning\">\n        <Link to =\"/new\" >Add A Pet To The Shelter</Link>\n        <Link to =\"/\">Home</Link>\n      \n\n      </div>\n      <Router>\n        <Main path=\"/\" />\n        <New path=\"/new\"/>\n        <Show path=\"/pet/:id\"/>\n        <Edit path=\"/edit/:id\"/>\n\n      </Router>\n\n\n\n\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}